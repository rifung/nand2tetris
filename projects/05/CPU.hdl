// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not16(in=instruction,
          out[0]=notInstruction0,
          out[1]=notInstruction1,
          out[2]=notInstruction2,
          out[3]=notInstruction3,
          out[4]=notInstruction4,
          out[5]=notInstruction5,
          out[6]=notInstruction6,
          out[7]=notInstruction7,
          out[8]=notInstruction8,
          out[9]=notInstruction9,
          out[10]=notInstruction10,
          out[11]=notInstruction11,
          out[12]=notInstruction12,
          out[13]=notInstruction13,
          out[14]=notInstruction14,
          out[15]=notInstruction15);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // setA
    Or(a=notInstruction15, b=instruction[5], out=setA);

    // setD
    And(a=instruction[15], b=instruction[4], out=setD);

    // registers A and D
    ARegister(in=result, load=setA, out=registerA, out[0..14]=addressM);
    DRegister(in=result, load=setD, out=registerD);

    // ALU
    Mux16(a=registerA, b=inM, sel=instruction[12], out=aluY);

    // D = !D?
    And(a=notInstruction11, b=notInstruction10, out=andNotI11NotI10);
    And(a=andNotI11NotI10, b=instruction[6], out=notD0);
    And(a=instruction[10], b=instruction[7], out=andI10I7);
    And(a=andI10I7, b=notInstruction6, out=notD1);
    Or(a=notD0, b=notD1, out=nX);

    // A=!A?
    And(a=notInstruction9, b=notInstruction8, out=andNotI9NotI8);
    And(a=andNotI9NotI8, b=instruction[6], out=notA0);
    And(a=instruction[8], b=instruction[7], out=andI8I7);
    And(a=andI8I7, b=notInstruction6, out=notA1);
    Or(a=notA0, b=notA1, out=nY);

    // +?
    Or(a=instruction[11], b=instruction[9], out=orI11I9);
    Or(a=orI11I9, b=instruction[7], out=f);

    ALU(x=registerD, y=aluY, zx=instruction[11], nx=nX, zy=instruction[9],
        ny=nY, f=f, no=false, out=aluResult, zr=aluZr, ng=aluNg);

    // Increment?
    Inc16(in=aluResult, out=incResult);
    And(a=instruction[7], b=instruction[6], out=shouldIncrement);

    Mux16(a=aluResult, b=incResult, sel=shouldIncrement, out=aluIncResult);
    
    // A or C instruction?
    Mux16(a=instruction, b=aluIncResult, sel=instruction[15], out=result,
          out=outM, out[0..7]=result0, out[8..15]=result1, out[15]=result15);

    // PC
    // zero?
    Or8Way(in=result0, out=zero0);
    Or8Way(in=result1, out=zero1);
    Or(a=zero0, b=zero1, out=notIsZero);
    Not(in=notIsZero, out=isZero);
    And(a=isZero, b=instruction[1], out=shouldJump0);

    // > 0?
    Not(in=result15, out=isNotNegative);
    And(a=isNotNegative, b=notIsZero, out=isPositive);
    And(a=isPositive, b=instruction[0], out=shouldJump1);

    // < 0?
    And(a=result15, b=instruction[2], out=shouldJump2);

    // jump?
    Or(a=shouldJump0, b=shouldJump1, out=shouldJump01);
    Or(a=shouldJump01, b=shouldJump2, out=shouldJump012);
    And(a=shouldJump012, b=instruction[15], out=shouldJump);

    PC(in=registerA, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
}
